---
x-data-vault: &data-vault
  type: bind
  source: ${DATA_VAULT_PATH:-/media}
  target: /data

x-environment: &environment
  PUID: ${PUID:-1000}
  PGID: ${PGID:-1000}
  TZ: Asia/Jerusalem

services:
  jellyfin:
    container_name: jellyfin
    image: linuxserver/jellyfin:10.10.6
    restart: unless-stopped
    environment: *environment
    volumes:
      - ./configs/jellyfin:/config
      - <<: *data-vault
    expose:
      - "8096"
    networks:
      - servicenet
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.entrypoints=web-secure
      - traefik.http.routers.jellyfin.rule=Host(`m.tn.ojizero.dev`) || Host(`m.ln.ojizero.dev`)
      - traefik.http.routers.jellyfin.service=jellyfin
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096

  watcharr:
    container_name: watcharr
    image: ghcr.io/sbondco/watcharr:v2.0.2
    restart: unless-stopped
    environment: *environment
    # Watcharr image doesn't support the PUID and PGID environment variables
    # so we explcitly define those in the `user` directive for Docker.
    user: ${PUID:-1000}:${PGID:-1000}
    volumes:
      - ./configs/watcharr:/data
    expose:
      - "3080"
    networks:
      - servicenet
    labels:
      - traefik.enable=true
      - traefik.http.routers.watcharr.entrypoints=web-secure
      - traefik.http.routers.watcharr.rule=Host(`wrr.tn.ojizero.dev`) || Host(`wrr.ln.ojizero.dev`)
      - traefik.http.routers.watcharr.service=watcharr
      - traefik.http.services.watcharr.loadbalancer.server.port=3080

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:4.0.13
    restart: unless-stopped
    environment: *environment
    volumes:
      - ./configs/sonarr:/config
      - <<: *data-vault
    expose:
      - "8989"
    networks:
      - servicenet
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.entrypoints=web-secure
      - traefik.http.routers.sonarr.rule=Host(`srr.tn.ojizero.dev`) || Host(`srr.ln.ojizero.dev`)
      - traefik.http.routers.sonarr.service=sonarr
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
    # Given to Sonarr to allow access to DSM's DownloadStation
    extra_hosts:
      - "host.docker.internal:host-gateway"

  radarr:
    container_name: radarr
    image: linuxserver/radarr:5.19.3
    restart: unless-stopped
    environment: *environment
    volumes:
      - ./configs/radarr:/config
      - <<: *data-vault
    expose:
      - "7878"
    networks:
      - servicenet
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.entrypoints=web-secure
      - traefik.http.routers.radarr.rule=Host(`rrr.tn.ojizero.dev`) || Host(`rrr.ln.ojizero.dev`)
      - traefik.http.routers.radarr.service=radarr
      - traefik.http.services.radarr.loadbalancer.server.port=7878
    # Given to Radarr to allow access to DSM's DownloadStation
    extra_hosts:
      - "host.docker.internal:host-gateway"

  bazarr:
    container_name: bazarr
    image: linuxserver/bazarr:1.5.1
    restart: unless-stopped
    environment: *environment
    volumes:
      - ./configs/bazarr:/config
      - <<: *data-vault
    expose:
      - "6767:6767"
    networks:
      - servicenet
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.entrypoints=web-secure
      - traefik.http.routers.bazarr.rule=Host(`brr.tn.ojizero.dev`) || Host(`brr.ln.ojizero.dev`)
      - traefik.http.routers.bazarr.service=bazarr
      - traefik.http.services.bazarr.loadbalancer.server.port=6767
    # Given to Radarr to allow access to DSM's DownloadStation
    extra_hosts:
      - "host.docker.internal:host-gateway"

  prowlarr:
    container_name: prowlarr
    image: linuxserver/prowlarr:1.31.2
    restart: unless-stopped
    environment: *environment
    volumes:
      - ./configs/prowlarr:/config
    expose:
      - "9696"
    networks:
      - servicenet
      - mediasphere
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.entrypoints=web-secure
      - traefik.http.routers.prowlarr.rule=Host(`prr.tn.ojizero.dev`) || Host(`prr.ln.ojizero.dev`)
      - traefik.http.routers.prowlarr.service=prowlarr
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696

  # As an alternative for DSM's DownloadStation, Transmission
  # had the best UI IMO compared to the attorcious
  # qBittorrent and Deluge.
  transmission:
    container_name: transmission
    image: linuxserver/transmission:4.0.6
    restart: unless-stopped
    environment:
      <<: *environment
      USER: ${TRANSMISSION_USER}
      PASS: ${TRANSMISSION_PASS}
    volumes:
      - ./configs/transmission:/config
      - <<: *data-vault
    expose:
      - "9091"
    ports:
      - 51413:51413/tcp
      - 51413:51413/udp
    networks:
      - servicenet
    labels:
      - traefik.enable=true
      - traefik.http.routers.transmission.entrypoints=web-secure
      - traefik.http.routers.transmission.rule=Host(`q.tn.ojizero.dev`) || Host(`q.ln.ojizero.dev`)
      - traefik.http.routers.transmission.service=transmission
      - traefik.http.services.transmission.loadbalancer.server.port=9091

  # Proxy between us an Indexers to solve Cloudflare challenges
  flaresolverr:
    container_name: flaresolverr
    image: flaresolverr/flaresolverr:v3.3.21
    restart: unless-stopped
    environment: *environment
    expose:
      - "8191"
    networks:
      - mediasphere

  # I slightly prefer TubeSync (https://github.com/meeb/tubesync)
  # over MeTube, however for my current use case MeTube is
  # much more useful and straighforward.
  metube:
    container_name: metube
    image: ghcr.io/alexta69/metube:2025-03-22
    restart: unless-stopped
    environment:
      <<: *environment
      UID: ${PUID:-1000}
      GID: ${PGID:-1000}
      DOWNLOAD_DIR: /data/downloads/metube
      STATE_DIR: /data/downloads/metube/.metube
      TEMP_DIR: /data/downloads/metube/.metube
      OUTPUT_TEMPLATE: "%(channel)s/%(title)s.%(ext)s"
      OUTPUT_TEMPLATE_PLAYLIST: "%(playlist_title)s/%(playlist_index)s - %(title)s.%(ext)s"
      # Embeds English subtitles and chapter markers (for videos that have them),
      # and also changes the permissions on the downloaded video and sets the
      # file modification timestamp to the date of when it was downloaded.
      YTDL_OPTIONS: |
        {
          "writesubtitles": true,
          "subtitleslangs": ["en"],
          "updatetime": false,
          "postprocessors": [
            {
              "key": "Exec",
              "exec_cmd": "chmod 0664",
              "when": "after_move"
            },
            {
              "key": "FFmpegEmbedSubtitle",
              "already_have_subtitle": false
            },
            {
              "key": "FFmpegMetadata",
              "add_chapters": true
            }
          ]
        }
    volumes:
      - ./configs/metube:/config
      - <<: *data-vault
    expose:
      - "8081"
    networks:
      - servicenet
    labels:
      - traefik.enable=true
      - traefik.http.routers.metube.entrypoints=web-secure
      - traefik.http.routers.metube.rule=Host(`ytdl.tn.ojizero.dev`) || Host(`ytdl.ln.ojizero.dev`)
      - traefik.http.routers.metube.service=metube
      - traefik.http.services.metube.loadbalancer.server.port=8081

networks:
  servicenet:
    name: servicenet
    external: true

  mediasphere:
