#!/usr/bin/env zsh

function usage {
  cat<<__EOF__

    usage: m dotfiles [help | sync | setup | edit]


    Examples:
      m dotfiles help                              # prints this help message
      m dotfiles pull                              # pull the latest changes to the dotfiles repo by running
                                                   # this includes this command itself and will implicitly update it
      m dotfiles setup                             # sets up the dotfiles repo for the first time in a system
      m dotfiles edit [--with <editor>]            # opens the dotfiles repo in an editor, defaults to EDITOR env var or vim
                                                   # if "--with" is passed with an editor it is used instead

__EOF__

}

function find_dotfiles {
  readlink -f "${0}" \
    | xargs dirname \
    | xargs dirname \
    | xargs dirname
}

export DOTFILES_PATH="${DOTFILES_PATH-$(find_dotfiles)}"

cmd="${1}"; shift

case "${cmd}" in
  pull)
    pushd "${DOTFILES_PATH}"
    git pull -p
    popd
    ;;

  setup)
    pushd "${DOTFILES_PATH}"

    for setup in ${DOTFILES_PATH}/bootstrap/common/*.setup; do
      source $setup
    done

    case "${OSTYPE}" in
      darwin*)
        for setup in ${DOTFILES_PATH}/bootstrap/macos/*.setup; do
          source $setup
        done

        ;;
    esac

    popd
    ;;

  bundle)
    if [ ! -z "$1" ] && [ "$1" = '--clean' ]; then
      opts="--cleanup --zap"
    elif [ ! -z "$1" ]; then
      echo "Unknown option: ${1}"
      exit 1
    fi

    pushd "${DOTFILES_PATH}"
    brew bundle install --file "${DOTFILES_PATH}/Brewfile" $opts
    popd

    if [[ -f "${DOTFILES_PATH}/.local/Brewfile" ]]; then
      pushd "${DOTFILES_PATH}/.local"
      brew bundle install --file "${DOTFILES_PATH}/.local/Brewfile" $opts
      popd
    fi

  edit)
    editor="${EDITOR-vim}"
    if [ ! -z "$1" ] && [ "$1" = '--with' ] && [ ! -z "$2" ]; then
      editor="${2}"
    elif [ ! -z "$1" ] && [ "$1" = '--with' ] && [ -z "$2" ]; then
      echo "Missing editor to be passed with config" >&2
      exit 1
    elif [ ! -z "$1" ]; then
      echo "Unknown option passed" >&2
      exit 1
    fi

    $editor "${DOTFILES_PATH}"
    ;;

  help)
    usage
    ;;

  *)
    [ -z "$1" ] && usage && exit 1
    ;;
esac
