#!/usr/bin/env zsh

function usage {
  cat<<__EOF__

    usage: m dotfiles [help | sync | setup | edit]


    Examples:
      m dotfiles help                              # prints this help message
      m dotfiles pull                              # pull the latest changes to the dotfiles repo by running
                                                   # this includes this command itself and will implicitly update it
      m dotfiles setup                             # sets up the dotfiles repo for the first time in a system
      m dotfiles edit [--with <editor>]            # opens the dotfiles repo in an editor, defaults to EDITOR env var or vim
                                                   # if "--with" is passed with an editor it is used instead

__EOF__

}

function find_dotfiles {
  readlink -f "${0}" \
    | xargs dirname \
    | xargs dirname \
    | xargs dirname
}
export DOTFILES_PATH="${DOTFILES_PATH-$(find_dotfiles)}"

function do_setup {
  for setup in ${DOTFILES_PATH}/bootstrap/common/*.setup; do
    source $setup
  done

  case "${OSTYPE}" in
    darwin*)
      for setup in ${DOTFILES_PATH}/bootstrap/macos/*.setup; do
        source $setup
      done

      ;;
  esac
}

function did_run {
  CACHE_DIR="${DOTFILES_PATH}/bootstrap/.cache"
  mkdir -p "${CACHE_DIR}"
  system_setup="${1:t2}"
  system="${system_setup:h}"
  setup="${system_setup:t}"
  : ${system:?failed to know which system this setup is for}
  : ${setup:?failed to know which setup this setup is}
  [[ -f "${CACHE_DIR}/${system}/${setup}" ]]
}

function save_run {
  CACHE_DIR="${DOTFILES_PATH}/bootstrap/.cache"
  mkdir -p "${CACHE_DIR}"
  system_setup="${1:t2}"
  system="${system_setup:h}"
  setup="${system_setup:t}"
  : ${system:?failed to know which system this setup is for}
  : ${setup:?failed to know which setup this setup is}
  touch "${CACHE_DIR}/${system}/${setup}"
}

function source_once {
  if ! did_run "${1}"; then
    source "${1}"
    save_run "${1}"
  fi
}

function do_setup_once {
  for setup in ${DOTFILES_PATH}/bootstrap/common/*.setup.once; do
    source_once "${setup}"
  done

  case "${OSTYPE}" in
    darwin*)
      for setup in ${DOTFILES_PATH}/bootstrap/macos/*.setup.once; do
        source_once "${setup}"
      done

      ;;
  esac
}

cmd="${1}"; shift

case "${cmd}" in
  pull)
    pushd "${DOTFILES_PATH}"
    git pull -p
    popd
    ;;

  setup)
    pushd "${DOTFILES_PATH}"

    do_setup
    do_setup_once

    popd
    ;;

  bundle)
    if [ ! -z "$1" ] && [ "$1" = '--reset' ]; then
      opts=(--cleanup --zap --force)
    elif [ ! -z "$1" ]; then
      echo "Unknown option: ${1}"
      exit 1
    fi


    if [[ -f "${DOTFILES_PATH}/.local/Brewfile" ]]; then
      # If we have a locally defined Brewfile combine it with the main and run them together.
      # We disable lock here as it could leak what's in the .local/Brewfile.
      cat "${DOTFILES_PATH}/Brewfile" "${DOTFILES_PATH}/.local/Brewfile" | brew bundle install $opts --file - --no-lock
    else
      brew bundle install $opts --file "${DOTFILES_PATH}/Brewfile"
    fi

    ;;

  edit)
    editor="${EDITOR-vim}"
    if [ ! -z "$1" ] && [ "$1" = '--with' ] && [ ! -z "$2" ]; then
      editor="${2}"
    elif [ ! -z "$1" ] && [ "$1" = '--with' ] && [ -z "$2" ]; then
      echo "Missing editor to be passed with config" >&2
      exit 1
    elif [ ! -z "$1" ]; then
      echo "Unknown option passed" >&2
      exit 1
    fi

    $editor "${DOTFILES_PATH}"
    ;;

  help)
    usage
    ;;

  *)
    [ -z "$1" ] && usage && exit 1
    ;;
esac
